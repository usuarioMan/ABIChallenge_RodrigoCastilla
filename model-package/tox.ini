# Tox es una herramienta de línea de comandos para gestionar entornos virtuales y ejecutar pruebas.
# Su objetivo es estandarizar las pruebas en Python.

[tox]
min_version = 4
envlist = test_package, checks
skipsdist = True

# Configuración base para los entornos de prueba.
[testenv]
basepython = python
install_command = pip install {opts} {packages}
allowlist_externals = train

# Variables de entorno para configurar el entorno virtual de prueba.
setenv =
	PYTHONPATH=.
	PYTHONHASHSEED=0

# Configuración del entorno de prueba llamado "test_package".
[testenv:test_package]
envdir = {toxworkdir}/test_package
deps =
	-r{toxinidir}/requirements/test_requirements.txt
commands =
	python regression_model/train_pipeline.py
	pytest \
	-s \
	-vv \
	{posargs:tests/}

# Configuración del entorno de prueba llamado "train".
[testenv:train]
envdir = {toxworkdir}/test_package
deps =
    {[testenv:test_package]deps}
commands =
	python regression_model/train_pipeline.py

# Configuración del entorno de prueba llamado "checks" para realizar comprobaciones estáticas.
[testenv:checks]
envdir = {toxworkdir}/checks
deps =
	-r{toxinidir}/requirements/typing_requirements.txt
commands =
	flake8 regression_model tests
	isort regression_model tests
	{posargs:mypy regression_model}

# Configuración para el linter flake8.
[flake8]
exclude = .git,env
max-line-length = 100
