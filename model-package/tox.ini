# Tox es una herramienta de línea de comandos para gestionar entornos virtuales y ejecutar pruebas. Su objetivo es estandarizar las pruebas en Python.

# Con Tox podemos (en varios sistemas operativos):
# + Eliminar desafíos de PYTHONPATH al ejecutar scripts/pruebas
# + Eliminar la confusión en la configuración de virtualenv
# + Agilizar pasos como entrenamiento de modelos y publicación de modelos

# Configuración principal de Tox
[tox]
min_version = 4
envlist = test_package, checks
skipsdist = True

# Configuración para los entornos de prueba
[testenv]
basepython = python
install_command = pip install {opts} {packages}
allowlist_externals = train, python

# Pasar variables de entorno a los entornos de prueba
passenv =
    KAGGLE_USERNAME
    KAGGLE_KEY
    GEMFURY_PUSH_URL

# Configuración del entorno de prueba "test_package"
[testenv:test_package]
allowlist_externals = python
deps =
    -rrequirements/test_requirements.txt

setenv =
    PYTHONPATH=.
    PYTHONHASHSEED=0

# Comandos para ejecutar pruebas
commands =
    python regression_model/train_pipeline.py
    pytest \
        -s \
        -vv \
        {posargs:tests/}

# Configuración del entorno de prueba "train"
[testenv:train]
envdir = {toxworkdir}/test_package
deps =
    {[testenv:test_package]deps}

setenv =
    {[testenv:test_package]setenv}

# Comandos para ejecutar entrenamiento del modelo
commands =
    python regression_model/train_pipeline.py

# Configuración del entorno de prueba "fetch_data" #TODO: implement
# [testenv:fetch_data]
# envdir = {toxworkdir}/test_package
# allowlist_externals = unzip
# deps =
#     kaggle<1.6.0
# 
# setenv =
#     {[testenv:test_package]setenv}
# 
# # Comandos para descargar y descomprimir datos del modelo
# commands =
#     # fetch
#     kaggle competitions download -c house-prices-advanced-regression-techniques -p ./regression_model/datasets
#     # unzip
#     unzip ./regression_model/datasets/house-prices-advanced-regression-techniques.zip -d ./regression_model/datasets

# Configuración del entorno de prueba "publish_model"
[testenv:publish_model]
envdir = {toxworkdir}/test_package
allowlist_externals = *
deps =
    {[testenv:test_package]deps}

setenv =
    {[testenv:test_package]setenv}

# Comandos para entrenar el modelo y publicarlo
commands =
    python regression_model/train_pipeline.py
    ./publish_model.sh .

# Configuración del entorno de prueba "checks"
[testenv:checks]
envdir = {toxworkdir}/checks
deps =
    -r{toxinidir}/requirements/typing_requirements.txt

# Comandos para realizar comprobaciones estáticas
commands =
    flake8 regression_model tests
    isort regression_model tests
    black regression_model tests
    {posargs:mypy regression_model}

# Configuración para el linter flake8
[flake8]
exclude = .git,env
max-line-length = 90
