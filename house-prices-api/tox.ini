# Tox es una herramienta genérica de gestión de entornos virtuales y comandos de prueba en línea.
# Su objetivo es estandarizar las pruebas en Python. Lo utilizaremos extensamente en este curso.

# [pytest]: Configuración para el plugin de Pytest
# log_cli_level=WARNING: Configura el nivel de registro para la salida de la línea de comandos de Pytest.

[pytest]
log_cli_level=WARNING

# [tox]: Configuración principal de Tox
# envlist = test_app, checks: Lista de entornos virtuales que Tox ejecutará.
# skipsdist = True: Evita la distribución y construcción de paquetes, ya que no es necesario para este proyecto.

[tox]
envlist = test_app, checks
skipsdist = True

# [testenv]: Configuración para los entornos virtuales de Tox
# install_command = pip install {opts} {packages}: Comando para instalar dependencias en el entorno virtual.

[testenv]
install_command = pip install {opts} {packages}

# [testenv:test_app]: Configuración específica para el entorno virtual 'test_app'
# deps = -rtest_requirements.txt: Dependencias especificadas en el archivo 'test_requirements.txt'.
# setenv = PYTHONPATH=.: Establece la variable de entorno PYTHONPATH para incluir el directorio actual.
#          PYTHONHASHSEED=0: Establece la semilla de hash de Python para reproducibilidad.

[testenv:test_app]
deps =
    -rtest_requirements.txt

setenv =
    PYTHONPATH=.
    PYTHONHASHSEED=0

# commands=pytest -vv {posargs:app/tests/}: Comando para ejecutar las pruebas con Pytest en el directorio 'app/tests/'.

commands=
    pytest \
    -vv \
    {posargs:app/tests/}

[testenv:test_db]
deps =
    -rtest_requirements.txt

setenv =
    PYTHONPATH=.
    PYTHONHASHSEED=0

# commands=pytest -vv {posargs:app/tests/}: Comando para ejecutar las pruebas con Pytest en el directorio 'app/tests/'.

commands=
    pytest \
    -vv \
    {posargs:database/tests/}

# [testenv:run]: Configuración para el entorno virtual 'run', utilizado para ejecutar la aplicación.
# envdir = {toxworkdir}/test_app: Directorio del entorno virtual 'test_app'.
# Deps y setenv heredan de [testenv:test_app].
# commands=python app/main.py: Comando para ejecutar la aplicación principal.

[testenv:run]
envdir = {toxworkdir}/test_app
deps =
    {[testenv:test_app]deps}

setenv =
    {[testenv:test_app]setenv}

commands=
    python app/main.py

# [testenv:checks]: Configuración para el entorno virtual 'checks', utilizado para ejecutar comprobaciones de estilo y calidad del código.
# envdir = {toxworkdir}/checks: Directorio del entorno virtual 'checks'.
# deps = -r{toxinidir}/typing_requirements.txt: Dependencias especificadas en el archivo 'typing_requirements.txt'.
# commands = flake8 app: Comando para ejecutar el linter Flake8 en el directorio 'app'.
#            isort app: Comando para ordenar las importaciones con 'isort' en el directorio 'app'.
#            black app: Comando para formatear el código con 'black' en el directorio 'app'.
#            mypy app: Comando para ejecutar el verificador de tipos 'mypy' en el directorio 'app'.

[testenv:checks]
envdir = {toxworkdir}/checks
deps =
    -r{toxinidir}/typing_requirements.txt
commands =
    flake8 app
    isort app
    black app
#    {posargs:mypy app}  # TODO: This is not working

# [flake8]: Configuración para el linter Flake8.
# exclude: Directorios y archivos excluidos del análisis.
# max-line-length = 88: Longitud máxima de línea permitida.

[flake8]
exclude = .git,__pycache__,__init__.py,.mypy_cache,.pytest_cache,.venv,alembic
max-line-length = 88
